name: Deploy Backend

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - staging
          - development

env:
  NODE_VERSION: "18"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

        - name: Setup Node.js
          uses: actions/setup-node@v4
          with:
            node-version: ${{ env.NODE_VERSION }}

        - name: Install dependencies
          run: npm install

      - name: Run linter
        run: npm run lint

      - name: Run type check
        run: npm run build

      - name: Run tests
        run: npm run test:ci
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          JWT_SECRET: test-secret
          KORASTATS_API_KEY: ${{ secrets.KORASTATS_API_KEY }}
          MONGODB_URI: ${{ secrets.MONGODB_URI }}

  build-docker:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.event.inputs.environment || 'production' }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  deploy-production:
    needs: build-docker
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'))
    environment: production

    steps:
      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_PORT }}
          script: |
            # Navigate to your app directory
            cd ${{ secrets.PRODUCTION_APP_PATH }}

            # Pull latest code
            git pull origin main

            # Install dependencies
            npm install --production

            # Build the application
            npm run build

            # Restart the application
            pm2 restart sdsa-backend || pm2 start dist/server.js --name sdsa-backend

            # Check if application is running
            pm2 status

            echo "‚úÖ Production deployment completed"

  deploy-staging:
    needs: build-docker
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging'
    environment: staging

    steps:
      - name: Deploy to staging server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          port: ${{ secrets.STAGING_PORT }}
          script: |
            # Navigate to your app directory
            cd ${{ secrets.STAGING_APP_PATH }}

            # Pull latest code
            git pull origin main

            # Install dependencies
            npm install --production

            # Build the application
            npm run build

            # Restart the application
            pm2 restart sdsa-backend-staging || pm2 start dist/server.js --name sdsa-backend-staging

            # Check if application is running
            pm2 status

            echo "‚úÖ Staging deployment completed"

  deploy-development:
    needs: build-docker
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'development'
    environment: development

    steps:
      - name: Deploy to development server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEVELOPMENT_HOST }}
          username: ${{ secrets.DEVELOPMENT_USER }}
          key: ${{ secrets.DEVELOPMENT_SSH_KEY }}
          port: ${{ secrets.DEVELOPMENT_PORT }}
          script: |
            # Navigate to your app directory
            cd ${{ secrets.DEVELOPMENT_APP_PATH }}

            # Pull latest code
            git pull origin main

            # Install dependencies
            npm install

            # Build the application
            npm run build

            # Restart the application
            pm2 restart sdsa-backend-dev || pm2 start dist/server.js --name sdsa-backend-dev

            # Check if application is running
            pm2 status

            echo "‚úÖ Development deployment completed"

  health-check:
    needs: [deploy-production, deploy-staging, deploy-development]
    runs-on: ubuntu-latest
    if: always() && (needs.deploy-production.result == 'success' || needs.deploy-staging.result == 'success' || needs.deploy-development.result == 'success')

    steps:
      - name: Health check
        run: |
          echo "üè• Running health checks..."

          # Check production health if deployed
          if [ "${{ needs.deploy-production.result }}" == "success" ]; then
            echo "Checking production health..."
            curl -f ${{ secrets.PRODUCTION_URL }}/health || echo "‚ùå Production health check failed"
          fi

          # Check staging health if deployed
          if [ "${{ needs.deploy-staging.result }}" == "success" ]; then
            echo "Checking staging health..."
            curl -f ${{ secrets.STAGING_URL }}/health || echo "‚ùå Staging health check failed"
          fi

          # Check development health if deployed
          if [ "${{ needs.deploy-development.result }}" == "success" ]; then
            echo "Checking development health..."
            curl -f ${{ secrets.DEVELOPMENT_URL }}/health || echo "‚ùå Development health check failed"
          fi

          echo "‚úÖ Health checks completed"

  notify:
    needs:
      [
        build-and-test,
        build-docker,
        deploy-production,
        deploy-staging,
        deploy-development,
        health-check,
      ]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Notify deployment status
        run: |
          echo "üì¢ Deployment notification"

          # Add your notification logic here
          # Examples:
          # - Slack notification
          # - Discord notification
          # - Email notification

          if [ "${{ needs.build-and-test.result }}" == "success" ] && [ "${{ needs.build-docker.result }}" == "success" ]; then
            echo "‚úÖ Deployment successful"
          else
            echo "‚ùå Deployment failed"
            exit 1
          fi

