name: Deploy Backend

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - development

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linter
        run: npm run lint
      
      - name: Run type check
        run: npm run build
      
      - name: Run tests
        run: npm run test:ci
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          JWT_SECRET: test-secret
          KORASTATS_API_KEY: ${{ secrets.KORASTATS_API_KEY }}
          MONGODB_URI: ${{ secrets.MONGODB_URI }}

  build-docker:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.event.inputs.environment || 'production' }}
      
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  deploy-production:
    needs: build-docker
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'))
    environment: production
    
    steps:
      - name: Deploy to production
        run: |
          echo "üöÄ Deploying to production..."
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:production"
          echo "Image digest: ${{ needs.build-docker.outputs.image-digest }}"
          
          # Add your production deployment commands here
          # Examples:
          # - kubectl set image deployment/backend backend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:production
          # - aws ecs update-service --cluster your-cluster --service your-service --force-new-deployment
          # - docker service update --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:production your-service
          
          echo "‚úÖ Production deployment initiated"

  deploy-staging:
    needs: build-docker
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging'
    environment: staging
    
    steps:
      - name: Deploy to staging
        run: |
          echo "üß™ Deploying to staging..."
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging"
          echo "Image digest: ${{ needs.build-docker.outputs.image-digest }}"
          
          # Add your staging deployment commands here
          
          echo "‚úÖ Staging deployment initiated"

  deploy-development:
    needs: build-docker
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'development'
    environment: development
    
    steps:
      - name: Deploy to development
        run: |
          echo "üîß Deploying to development..."
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:development"
          echo "Image digest: ${{ needs.build-docker.outputs.image-digest }}"
          
          # Add your development deployment commands here
          
          echo "‚úÖ Development deployment initiated"

  health-check:
    needs: [deploy-production, deploy-staging, deploy-development]
    runs-on: ubuntu-latest
    if: always() && (needs.deploy-production.result == 'success' || needs.deploy-staging.result == 'success' || needs.deploy-development.result == 'success')
    
    steps:
      - name: Health check
        run: |
          echo "üè• Running health checks..."
          
          # Add your health check commands here
          # Examples:
          # - curl -f https://your-api.com/health || exit 1
          # - kubectl get pods -l app=backend
          
          echo "‚úÖ Health checks passed"

  notify:
    needs: [build-and-test, build-docker, deploy-production, deploy-staging, deploy-development, health-check]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Notify deployment status
        run: |
          echo "üì¢ Deployment notification"
          
          # Add your notification logic here
          # Examples:
          # - Slack notification
          # - Discord notification
          # - Email notification
          
          if [ "${{ needs.build-and-test.result }}" == "success" ] && [ "${{ needs.build-docker.result }}" == "success" ]; then
            echo "‚úÖ Deployment successful"
          else
            echo "‚ùå Deployment failed"
            exit 1
          fi
